/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define LOWER  1
#define RAISE  2
#define ADJUST 3

/* Uncomment this block if using RGB
&led_strip {
       chain-length = <6>;
       // chain-length = <38>; // Uncomment if using both per-key and underglow LEDs
       // chain-length = <32>; // Uncomment if using only per-key LEDs.
};
 */
/* NOTE: At the time of the creation of this keymap, there are no specified codes for 'eisuu' and 'kana' input in ZMK.
However, 'LANG1' and 'LANG2' are fully-functioning candidates for 'kana' and 'eisuu' input respectively.
As such, those are in use within the default layer at this time.*/

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC   |   1    |   2    |   3    |   4    |   5    |                                      |   6    |   7    |   8    |   9    |   0    |  DEL   |
            // |  TAB   |   Q    |   W    |   E    |   R    |   T    |                                      |   Y    |   U    |   I    |   O    |   P    |  BSPC  |
            // |  CTRL  |   A    |   S    |   D    |   F    |   G    |                                      |   H    |   J    |   K    |   L    |   ;    |   '    |
            // |  SHIFT |   Z    |   X    |   C    |   V    |   B    |  LBKT  |                    |  RBKT  |   N    |   M    |   ,    |   .    |   /    |  RET   |
            // | CTRL   |  GRAVE |  LGU   |  ALT   |  LOWER | SPACE  |  CTRL  |                    |  RET   |  SPACE | RAISE  |  LEFT  |  DOWN  |  UP    |  RIGHT |

            bindings = <
&kp ESC    &kp N1     &kp N2    &kp N3    &kp N4     &kp N5                            &kp N6     &kp N7     &kp N8     &kp N9      &kp N0     &kp DEL
&trans     &kp Q      &kp W     &kp E     &kp R      &kp T                             &kp Y      &kp U      &kp I      &kp O       &kp P      &kp BSPC
&kp TAB    &kp A      &kp S     &kp D     &kp F      &kp G                             &kp H      &kp J      &kp K      &kp L       &kp SEMI   &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B      &kp LBKT     &kp RBKT  &kp N      &kp M      &kp COMMA  &kp PERIOD  &kp SLASH  &kp RET
&kp LCTRL  &kp GRAVE  &kp LGUI  &kp LALT  &mo LOWER  &kp SPACE  &kp LCTRL    &kp RET   &kp SPACE  &mo RAISE  &kp LEFT   &kp DOWN    &kp UP     &kp RIGHT
            >;
        };

        lower_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |       |       |       |       |       |                                    |  F6   |  F7   |  F8   |  F9   |  F10  |  F11  |
            // |   `   | VOL-  | VOL+  | MUTE  |   4   |   5   |                                    |   6   |   7   |   8   |   9   |   0   |  DEL  |
            // |       |  F1   |  F2   |  F3   |  F4   |  F5   |                                    |   =   |   +   |   -   |   *   |   /   |  PIPE |
            // |       |  F7   |  F8   |  F9   |  F10  |  F11  |       |                    |       |  F12  |       | PSCRN | PG_DN | PG_UP |       |
            // | ADJUST|       |       |       |       |       |       |                    |       |       |       | NEXT  | VOL-  | VOL+  | PLAY  |

            bindings = <
&trans      &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE      &trans     &trans                    &kp F6     &kp F7                &kp F8                 &kp F9            &kp F10            &kp F11
&kp GRAVE   &kp N1        &kp N2        &kp N3          &kp N4     &kp N5                    &kp N6     &kp N7                &kp N8                 &kp N9            &kp N0             &kp DEL
&trans      &sk LEFT_WIN  &sk LEFT_ALT  &sk LEFT_SHIFT  &sk LCTRL  &kp F5                    &kp EQUAL  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp PIPE
&trans      &kp F1        &kp F2        &kp F3          &kp F4     &kp F5  &trans    &trans  &kp TILDE  &kp PLUS              &kp MINUS              &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans
&mo ADJUST  &trans        &trans        &trans          &trans     &trans  &trans    &trans  &trans     &trans                &kp C_NEXT             &kp C_VOL_DN      &kp C_VOL_UP       &kp C_PP
            >;
        };

        raise_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |      |      |      |      |      |      |                                  |      |      |      |      |      |      |
            // |  ~   |  !   |  @   |  #   |  $   |  %   |                                  |  ^   | HOME |  UP  | END  |  (   |      |
            // |      |      |   (  |   )  |   [  |   ]  |                                  |      | LEFT | DOWN | RIGHT|  \   |  \   |
            // |      |      |      |      |   {  |   }  |  (   |                    |  )   |      |      |      | HOME | END  |      |
            // |      |      |      |      |      |      |      |                    |      |      |      |      |      |      |      |

            bindings = <
&trans     &trans        &trans        &trans          &trans     &trans                           &trans         &trans    &trans    &trans     &trans    &trans
&kp TILDE  &kp EXCL      &kp AT        &kp HASH        &kp DLLR   &kp PRCNT                        &kp PAGE_UP    &kp HOME  &kp UP    &kp END    &kp RPAR  &trans
&trans     &sk LEFT_WIN  &sk LEFT_ALT  &sk LEFT_SHIFT  &sk LCTRL  &kp RBKT                         &kp PAGE_DOWN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp BSLH  &kp BSLH
&trans     &kp LC(Z)     &kp LC(X)     &kp LC(C)       &kp LC(V)  &kp RBRC   &kp LPAR    &kp RPAR  &trans         &trans    &trans    &kp HOME   &kp END   &trans
&trans     &trans        &trans        &trans          &trans     &trans     &trans      &trans    &trans         &trans    &trans    &trans     &trans    &trans
            >;
        };

        adjust_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |    `     |    !     |    @     |    #     |    $     |    %     |                                          |    ^     |    &     |    *     |    (     |    )     |  EP TOG  |
            // |  BT CLR  | BT SEL0  | BT SEL1  | BT SEL2  | BGT SEL3 | BT SEL4  |                                          | RGB EFF+ | RGB HUE+ | RGB SAT+ | RGB SPD+ | RGB BRI+ | RGB TOG  |
            // |  BT NXT  | OUT TOG  | OUT USB  | OUT BLE  |          |          |                                          | RGB EFF- | RGB HUE- | RGB SAT- | RGB SPD- | RGB BRI- |          |
            // |  BT PRV  |          |          |          |          |          |    {     |                    |    }     |          |          |          |          |          |          |
            // |          |          |          |          |          |          |          |                    |          |          |          |          |          |          |          |

            bindings = <
&kp GRAVE   &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT                           &kp CARET        &kp AMPS         &kp ASTRK        &kp LPAR         &kp RPAR         &ext_power EP_TOG
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                        &rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG
&bt BT_NXT  &out OUT_TOG  &out OUT_USB  &out OUT_BLE  &trans        &trans                              &rgb_ug RGB_EFR  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &trans
&bt BT_PRV  &trans        &trans        &trans        &trans        &trans        &kp LBRC    &kp RBRC  &trans           &trans           &trans           &trans           &trans           &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans      &trans    &trans           &trans           &trans           &trans           &trans           &trans
            >;
        };
    };
};

/ {
    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
    };
};

/ {
    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp TILDE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
